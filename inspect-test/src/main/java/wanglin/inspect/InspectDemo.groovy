package wanglin.inspect

/**
 * 关于事后风控（即图中通知）
 * 事后风控即可以由实时风控接口sync触发，也可以由非实接口触发。
 * 一个长期以来的误解是————风控系统有三个：事前，事中，事后。
 *
 * 其实并没有。关键在于速度，检测的速度足够快，在交易之前完成，就是实时。在交易过程中完成，就是事中。在交易之后完成，就是事后。
 * 所以并没有一个很标准的事前，事中，事后的定义，完全看不同的业务的执行速度。
 *
 * 理论上，越靠前，风险越小，收益越高。所以检测的速度肯定是越快越好。
 * 但实际情况下，还要考虑检测的结果的准确度和处理策略。一般上有几种处理策略
 *  1，确定是风险
 *  2，确定不是风险
 *  3，不能确定是不是风险，需要进一步措施
 *      3.1可以采取技术措施（比如自动发短信验证，人脸识别等再校验）
 *      3.2需要人工措施（风控控制台审核。。。等）
 * 对于情况3，即使检测的速度足够快，实时返回也意义不大————并且我们认为
 *
 *  按照处理策略和速度的组合，有几种情况
 *  1，明确，并且足够快——事前
 *  2，明确，一般快——有事中业务系统处理
 *  3，明确，不够快——有事后系统处理
 *  4，不明确，风控系统处理/其他系统处理
 *
 *  这里其实有一些问题：对于是不是够快——其实并非一个确定量————而是一个相对量。每笔业务的检测速度都是不确定的，并且风控系统也不可能感知到
 *  业务系统的速度。所以风控系统跟业务系统之间的结果耦合一定不是直接的。而必须是间接的。（业务系统和风控系统同时依赖于某一个媒介组件————
 *  一般上是MQ，但是我们如果真的使用MQ的话，还会有一些问题——就无法适应外网情况，所以如果架构上统一设计层MQ的话，外部还需要一个外网适配器
 *  对内外网，同异步做一个适配）
 */
interface InspectDemo {
    /**
     * 同步调用接口
     * @param bizCode 业务码
     * @param bizRequest 业务报文
     * @return
     */
    Object sync(String bizCode, Object bizRequest);
    /**
     * 异步调用接口
     */
    void async(String, Object bizRequest)
}
